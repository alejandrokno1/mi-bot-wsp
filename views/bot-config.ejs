<!-- views/bot-config.ejs -->
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Configuraci√≥n del Bot</title>
  <link rel="stylesheet" href="/static/styles.css" />
  <style>
    .grid{display:grid;gap:1rem}
    .grid-2{grid-template-columns:1fr 1fr}
    .card{border:1px solid #eee;border-radius:10px;padding:1rem;background:#fff}
    .row{display:flex;gap:.5rem;align-items:center;flex-wrap:wrap}
    .muted{color:#666;font-size:.9rem}
    .pill{padding:.2rem .5rem;border-radius:9999px;background:#f3f4f6;border:1px solid #e5e7eb}

    textarea{width:100%;min-height:200px;font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace}
    table{width:100%;border-collapse:collapse}
    th,td{padding:.5rem .6rem;border-bottom:1px solid #eee}
    input[type="time"]{padding:.3rem .4rem}
    input[type="checkbox"]{transform:scale(1.2)}

    .qr-box{display:flex;align-items:center;justify-content:center;min-height:280px;border:1px dashed #ddd;border-radius:12px;background:#fafafa;text-align:center}

    /* Botones */
    .btn{padding:.5rem .8rem;border:1px solid #d1d5db;border-radius:8px;cursor:pointer;background:#f8fafc;color:#111827;transition:filter .15s ease,background .15s ease}
    .btn:hover{filter:brightness(.96)}
    .btn:disabled{opacity:.55;cursor:default}
    .btn-primary{background:#16a34a;border-color:#15803d;color:#fff}
    .btn-primary:hover{background:#15803d}
    .btn-danger{background:#dc2626;border-color:#b91c1c;color:#fff}
    .btn-danger:hover{background:#b91c1c}
    .btn-warning{background:#f59e0b;border-color:#d97706;color:#111827}
    .btn-warning:hover{background:#d97706;color:#fff}
  </style>
</head>
<body>
  <div class="container">
    <h1>Configuraci√≥n del Bot</h1>
    <p><a href="/">‚Üê Volver al men√∫</a></p>

    <div class="grid grid-2">
      <!-- Estado y control -->
      <div class="card">
        <h2>Estado</h2>
        <div id="statusLine" class="muted">Cargando‚Ä¶</div>

        <div class="row" style="margin-top:.5rem">
          <button id="startBtn"   class="btn btn-primary">Iniciar</button>
          <button id="stopBtn"    class="btn btn-danger">Detener</button>
          <button id="restartBtn" class="btn btn-warning">Reiniciar</button>
          <button id="logoutBtn"  class="btn btn-danger" title="Cierra sesi√≥n y pedir√° QR">Cerrar sesi√≥n</button>

          <span id="pid" class="pill">PID ‚Äì</span>
          <span id="uptime" class="pill">Uptime 00:00:00</span>
        </div>

        <h3 style="margin-top:1rem">QR de vinculaci√≥n</h3>
        <div id="qrBox" class="qr-box">No se requiere QR (ya conectado).</div>
      </div>

      <!-- Apagado suave -->
      <div class="card">
        <h2>Apagado suave (horarios)</h2>
        <div class="row">
          <label><input type="checkbox" id="softEnabled"> Activar apagado suave</label>
          <label>Zona horaria: <input type="text" id="tz" placeholder="America/Bogota" style="margin-left:.3rem"></label>
        </div>
        <p class="muted">Define las ventanas por d√≠a (0=Dom ‚Ä¶ 6=S√°b). Deja desactivado para cerrar ese d√≠a.</p>

        <table>
          <thead><tr><th>D√≠a</th><th>Habilitado</th><th>Inicio</th><th>Fin</th></tr></thead>
          <tbody id="winBody"></tbody>
        </table>

        <div class="row" style="margin-top:.5rem">
          <button id="saveWindows" class="btn">Guardar horarios</button>
          <span id="saveWinMsg" class="muted"></span>
        </div>
      </div>
    </div>

    <!-- Contexto -->
    <div class="card" style="margin-top:1rem">
      <h2>Contexto del bot</h2>
      <p class="muted">Este texto se usa como contexto/sistema para el bot.</p>
      <textarea id="context"></textarea>
      <div class="row" style="margin-top:.5rem">
        <button id="saveContext" class="btn">Guardar contexto</button>
        <span id="saveCtxMsg" class="muted"></span>
      </div>
    </div>
  </div>

  <!-- Cargador seguro de la librer√≠a de QR (con fallback de CDN) -->
  <script>
    async function ensureQRCodeLib() {
      if (window.QRCode) return;
      try {
        await new Promise((res, rej) => {
          const s = document.createElement('script');
          s.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js';
          s.onload = res; s.onerror = rej; document.head.appendChild(s);
        });
        if (window.QRCode) return;
      } catch {}
      await new Promise((res, rej) => {
        const s = document.createElement('script');
        s.src = 'https://unpkg.com/qrcode@1.5.3/build/qrcode.min.js';
        s.onload = res; s.onerror = rej; document.head.appendChild(s);
      });
    }
  </script>

  <!-- L√≥gica de la p√°gina -->
  <script>
    const $ = s => document.querySelector(s);
    const state = { token: null, polling: null };
    // Si definiste ADMIN_TOKEN y quieres probar desde el navegador:
    // state.token = 'TU_TOKEN';

    function headers() {
      const h = { 'Content-Type': 'application/json' };
      if (state.token) h['x-admin-token'] = state.token;
      return h;
    }

    function dowName(i){ return ['Domingo','Lunes','Martes','Mi√©rcoles','Jueves','Viernes','S√°bado'][i] || i; }
    function fmtUptime(sec){
      const s = Number(sec||0), h = Math.floor(s/3600), m = Math.floor((s%3600)/60), r = s%60;
      const pad = n => String(n).padStart(2,'0'); return `${pad(h)}:${pad(m)}:${pad(r)}`;
    }

    async function fetchStatus(){ const r = await fetch('/api/bot/status',   { headers: headers() }); return r.json(); }
    async function fetchSettings(){const r = await fetch('/api/settings',     { headers: headers() }); return r.json(); }

    // ---- Render principal (incluye QR con m√∫ltiples fallbacks) ----
    async function renderStatus(payload){
      const { running, pid, uptimeSec, state: st } = payload;
      $('#pid').textContent = pid ? `PID ${pid}` : 'PID ‚Äì';
      $('#uptime').textContent = `Uptime ${fmtUptime(uptimeSec)}`;

      let line = '';
      if (!running) line = '‚èπÔ∏è Bot detenido.';
      else if (st?.ready) line = 'üü¢ Conectado y listo.';
      else if (st?.connected) line = 'üü° Conectado, preparando‚Ä¶';
      else if (st?.needsQR) line = 'üü† Requiere QR.';
      else line = '‚è≥ Iniciando‚Ä¶';
      $('#statusLine').textContent = line;

      // QR
      const box = $('#qrBox');
      if (st?.needsQR && st?.qr) {
        box.innerHTML = '';
        try { await ensureQRCodeLib(); } catch {}

        if (window.QRCode) {
          // 1) IMG (dataURL)
          try {
            const dataUrl = await QRCode.toDataURL(st.qr, { width: 260, margin: 1, errorCorrectionLevel: 'M' });
            box.innerHTML = `<img src="${dataUrl}" alt="QR" style="display:block;width:260px;height:260px">`;
          } catch (e1) {
            console.warn('QR img fall√≥:', e1);
            // 2) CANVAS
            try {
              const canvas = document.createElement('canvas');
              await QRCode.toCanvas(canvas, st.qr, { width: 260, margin: 1, errorCorrectionLevel: 'M' });
              box.appendChild(canvas);
            } catch (e2) {
              console.warn('QR canvas fall√≥:', e2);
              // 3) SVG
              try {
                const svg = await QRCode.toString(st.qr, { type: 'svg', width: 260, margin: 1, errorCorrectionLevel: 'M' });
                box.innerHTML = svg;
              } catch (e3) {
                console.warn('QR svg fall√≥:', e3);
                // 4) Servicio externo (si no hay librer√≠a o falla todo)
                const url = 'https://api.qrserver.com/v1/create-qr-code/?size=260x260&data=' + encodeURIComponent(st.qr);
                box.innerHTML = `<img src="${url}" alt="QR" style="display:block;width:260px;height:260px">`;
              }
            }
          }
        } else {
          // Librer√≠a no disponible ‚Üí servicio externo
          const url = 'https://api.qrserver.com/v1/create-qr-code/?size=260x260&data=' + encodeURIComponent(st.qr);
          box.innerHTML = `<img src="${url}" alt="QR" style="display:block;width:260px;height:260px">`;
        }
      } else {
        box.textContent = 'No se requiere QR (ya conectado).';
      }

      // Botones
      $('#startBtn').disabled = running;
      $('#stopBtn').disabled  = !running;
    }

    function renderWindows(windows, settings){
      $('#softEnabled').checked = !!Number(settings.bot_soft_enabled ?? 1);
      $('#tz').value = settings.bot_tz || 'America/Bogota';

      const tbody = $('#winBody'); tbody.innerHTML = '';
      const byDow = {}; windows.forEach(w => { byDow[w.dow] = w; });

      for (let d=0; d<7; d++){
        const row = byDow[d] || { dow:d, start:'00:00', end:'00:00', enabled:0 };
        const tr = document.createElement('tr');
        tr.dataset.dow = d;
        tr.innerHTML = `
          <td>${dowName(d)}</td>
          <td><input type="checkbox" ${row.enabled ? 'checked' : ''} data-k="enabled"></td>
          <td><input type="time" value="${row.start}" data-k="start"></td>
          <td><input type="time" value="${row.end}"   data-k="end"></td>
        `;
        tbody.appendChild(tr);
      }
    }

    async function loadAll(){
      try {
        await renderStatus(await fetchStatus());
        const conf = await fetchSettings();
        if (conf.ok){
          renderWindows(conf.windows || [], conf.settings || {});
          $('#context').value = conf.settings?.bot_context || '';
        }
      } catch (e) { console.error(e); }
    }

    // Acciones
    $('#startBtn').onclick   = async ()=>{ await fetch('/api/bot/start',   { method:'POST', headers: headers() }); setTimeout(loadAll, 600); };
    $('#stopBtn').onclick    = async ()=>{ await fetch('/api/bot/stop',    { method:'POST', headers: headers() }); setTimeout(loadAll, 600); };
    $('#restartBtn').onclick = async ()=>{ await fetch('/api/bot/restart', { method:'POST', headers: headers() }); setTimeout(loadAll, 1000); };
    $('#logoutBtn').onclick  = async ()=>{
      if (!confirm('‚ö†Ô∏è Vas a cerrar sesi√≥n del n√∫mero actual.\nSe borrar√°n las credenciales locales y se generar√° un QR nuevo.\n¬øContinuar?')) return;
      await fetch('/api/bot/logout', { method:'POST', headers: headers() });
      setTimeout(loadAll, 1200);
    };

    $('#saveWindows').onclick = async ()=>{
      const soft = $('#softEnabled').checked ? '1' : '0';
      const tz   = $('#tz').value.trim() || 'America/Bogota';
      await fetch('/api/settings', { method:'POST', headers: headers(), body: JSON.stringify({ bot_soft_enabled: soft, bot_tz: tz }) });

      const rows = Array.from(document.querySelectorAll('#winBody tr')).map(tr => {
        const dow = Number(tr.dataset.dow);
        const enabled = tr.querySelector('[data-k="enabled"]').checked ? 1 : 0;
        const start = tr.querySelector('[data-k="start"]').value || '00:00';
        const end   = tr.querySelector('[data-k="end"]').value || '00:00';
        return { dow, start, end, enabled };
      });

      await fetch('/api/windows', { method:'POST', headers: headers(), body: JSON.stringify({ windows: rows }) });
      $('#saveWinMsg').textContent = 'Guardado.';
      setTimeout(()=> $('#saveWinMsg').textContent='', 1500);
    };

    $('#saveContext').onclick = async ()=>{
      const text = $('#context').value;
      await fetch('/api/settings', { method:'POST', headers: headers(), body: JSON.stringify({ bot_context: text }) });
      $('#saveCtxMsg').textContent = 'Guardado.';
      setTimeout(()=> $('#saveCtxMsg').textContent='', 1500);
    };

    // Estado en vivo
    loadAll();
    state.polling = setInterval(async ()=>{ try { await renderStatus(await fetchStatus()); } catch {} }, 5000);
  </script>
</body>
</html>
