<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Configuraci√≥n del Bot</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <!-- cache-busting opcional con ?v=4 -->
  <link rel="stylesheet" href="/static/styles.css?v=4" />
</head>
<body class="admin">
  <div class="container">
    <h1>Configuraci√≥n del Bot</h1>
    <p><a href="/">‚Üê Volver al men√∫</a></p>

    <!-- ====== 2 columnas ====== -->
    <div class="grid grid-2">
      <!-- === Columna Izquierda: Estado === -->
      <section class="card" aria-labelledby="estado-title">
        <h2 id="estado-title">Estado</h2>

        <div class="status-bar">
          <div id="statusLine" class="muted" role="status" aria-live="polite">Cargando‚Ä¶</div>
          <div class="status-pills">
            <span id="pid" class="pill">PID ‚Äì</span>
            <span id="uptime" class="pill">Uptime 00:00:00</span>
          </div>
        </div>

        <div class="row btn-row">
          <button id="startBtn"   class="btn btn-primary">Iniciar</button>
          <button id="stopBtn"    class="btn btn-danger">Detener</button>
          <button id="restartBtn" class="btn btn-warning">Reiniciar</button>
          <button id="logoutBtn"  class="btn btn-danger" title="Cierra sesi√≥n y pedir√° QR">Cerrar sesi√≥n</button>
        </div>

        <h3>QR de vinculaci√≥n</h3>
        <div id="qrBox" class="qr-box">No se requiere QR (ya conectado).</div>
      </section>

      <!-- === Columna Derecha: Apagado suave === -->
      <section class="card" aria-labelledby="apagado-title">
        <h2 id="apagado-title">Apagado suave (horarios)</h2>

        <div class="row controls-stack">
          <label class="checkbox-line">
            <input type="checkbox" id="softEnabled"> Activar apagado suave
          </label>

          <label class="tz-line">
            Zona horaria:
            <input type="text" id="tz" placeholder="America/Bogota" inputmode="text" autocomplete="off" />
          </label>
        </div>

        <p class="muted help">
          Define las ventanas por d√≠a (0=Dom ‚Ä¶ 6=S√°b). Deja desactivado para cerrar ese d√≠a.
        </p>

        <div class="actions">
          <button id="saveWindows" class="btn">Guardar horarios</button>
          <span id="saveWinMsg" class="muted" role="status" aria-live="polite"></span>
        </div>

        <div class="table-scroll">
          <table aria-label="Ventanas horarias">
            <thead>
              <tr><th>D√≠a</th><th class="center">Habilitado</th><th>Inicio</th><th>Fin</th></tr>
            </thead>
            <tbody id="winBody"></tbody>
          </table>
        </div>
      </section>
    </div>

    <!-- ====== Contexto a todo el ancho ====== -->
    <section class="card" aria-labelledby="contexto-title">
      <h2 id="contexto-title">Contexto del bot</h2>
      <p class="muted">Este texto se usa como contexto/sistema para el bot.</p>

      <div class="context-grid">
        <textarea id="context" aria-label="Contexto del bot"></textarea>
        <div class="actions end">
          <button id="saveContext" class="btn">Guardar contexto</button>
          <span id="saveCtxMsg" class="muted" role="status" aria-live="polite"></span>
        </div>
      </div>
    </section>
  </div>

  <!-- ===== Librer√≠a QR con fallback ===== -->
  <script>
    async function ensureQRCodeLib() {
      if (window.QRCode) return;
      const load = (src) => new Promise((res, rej) => {
        const s = document.createElement('script'); s.src = src;
        s.onload = res; s.onerror = rej; document.head.appendChild(s);
      });
      try { await load('https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js'); }
      catch { await load('https://unpkg.com/qrcode@1.5.3/build/qrcode.min.js'); }
    }
  </script>

  <!-- ===== L√≥gica ===== -->
  <script>
    const $ = (s) => document.querySelector(s);
    const state = { token: null, polling: null };

    const headers = () => {
      const h = { 'Content-Type': 'application/json' };
      if (state.token) h['x-admin-token'] = state.token;
      return h;
    };

    const dowName = (i) => ['Domingo','Lunes','Martes','Mi√©rcoles','Jueves','Viernes','S√°bado'][i] || i;
    const pad = (n) => String(n).padStart(2, '0');
    const fmtUptime = (sec) => {
      const s = Number(sec||0), h = Math.floor(s/3600), m = Math.floor((s%3600)/60), r = s%60;
      return `${pad(h)}:${pad(m)}:${pad(r)}`;
    };

    const fetchStatus   = async () => (await fetch('/api/bot/status', { headers: headers() })).json();
    const fetchSettings = async () => (await fetch('/api/settings',   { headers: headers() })).json();

    async function renderStatus(payload){
      const { running, pid, uptimeSec, state: st } = payload;
      $('#pid').textContent = pid ? `PID ${pid}` : 'PID ‚Äì';
      $('#uptime').textContent = `Uptime ${fmtUptime(uptimeSec)}`;

      let line = '‚è≥ Iniciando‚Ä¶';
      if (!running) line = '‚èπÔ∏è Bot detenido.';
      else if (st?.ready) line = 'üü¢ Conectado y listo.';
      else if (st?.connected) line = 'üü° Conectado, preparando‚Ä¶';
      else if (st?.needsQR) line = 'üü† Requiere QR.';
      $('#statusLine').textContent = line;

      const box = $('#qrBox');
      if (st?.needsQR && st?.qr) {
        box.innerHTML = '';
        try { await ensureQRCodeLib(); } catch {}
        if (window.QRCode) {
          try {
            const url = await QRCode.toDataURL(st.qr, { width:260, margin:1, errorCorrectionLevel:'M' });
            box.innerHTML = `<img src="${url}" alt="C√≥digo QR" width="260" height="260">`;
          } catch {
            try {
              const canvas = document.createElement('canvas');
              await QRCode.toCanvas(canvas, st.qr, { width:260, margin:1, errorCorrectionLevel:'M' });
              box.appendChild(canvas);
            } catch {
              const url = 'https://api.qrserver.com/v1/create-qr-code/?size=260x260&data='+encodeURIComponent(st.qr);
              box.innerHTML = `<img src="${url}" alt="C√≥digo QR" width="260" height="260">`;
            }
          }
        } else {
          const url = 'https://api.qrserver.com/v1/create-qr-code/?size=260x260&data='+encodeURIComponent(st.qr);
          box.innerHTML = `<img src="${url}" alt="C√≥digo QR" width="260" height="260">`;
        }
      } else {
        box.textContent = 'No se requiere QR (ya conectado).';
      }

      $('#startBtn').disabled = running;
      $('#stopBtn').disabled  = !running;
    }

    function renderWindows(windows, settings){
      $('#softEnabled').checked = !!Number(settings.bot_soft_enabled ?? 1);
      $('#tz').value = settings.bot_tz || 'America/Bogota';

      const tbody = $('#winBody'); tbody.innerHTML = '';
      const byDow = {}; windows.forEach(w => { byDow[w.dow] = w; });

      for (let d = 0; d < 7; d++){
        const row = byDow[d] || { dow:d, start:'00:00', end:'00:00', enabled:0 };
        const tr = document.createElement('tr');
        tr.dataset.dow = d;
        tr.innerHTML = `
          <td>${dowName(d)}</td>
          <td class="center"><input type="checkbox" ${row.enabled ? 'checked' : ''} data-k="enabled"></td>
          <td><input type="time" value="${row.start}" data-k="start"></td>
          <td><input type="time" value="${row.end}"   data-k="end"></td>
        `;
        tbody.appendChild(tr);
      }
    }

    async function loadAll(){
      try {
        await renderStatus(await fetchStatus());
        const conf = await fetchSettings();
        if (conf.ok){
          renderWindows(conf.windows || [], conf.settings || {});
          $('#context').value = conf.settings?.bot_context || '';
        }
      } catch (e) { console.error(e); }
    }

    // Acciones
    $('#startBtn').onclick   = async ()=>{ await fetch('/api/bot/start',   { method:'POST', headers: headers() }); setTimeout(loadAll, 600); };
    $('#stopBtn').onclick    = async ()=>{ await fetch('/api/bot/stop',    { method:'POST', headers: headers() }); setTimeout(loadAll, 600); };
    $('#restartBtn').onclick = async ()=>{ await fetch('/api/bot/restart', { method:'POST', headers: headers() }); setTimeout(loadAll, 1000); };
    $('#logoutBtn').onclick  = async ()=>{
      if (!confirm('‚ö†Ô∏è Vas a cerrar sesi√≥n del n√∫mero actual.\nSe borrar√°n las credenciales locales y se generar√° un QR nuevo.\n¬øContinuar?')) return;
      await fetch('/api/bot/logout', { method:'POST', headers: headers() });
      setTimeout(loadAll, 1200);
    };

    $('#saveWindows').onclick = async ()=>{
      const soft = $('#softEnabled').checked ? '1' : '0';
      const tz   = $('#tz').value.trim() || 'America/Bogota';
      await fetch('/api/settings', { method:'POST', headers: headers(), body: JSON.stringify({ bot_soft_enabled: soft, bot_tz: tz }) });

      const rows = Array.from(document.querySelectorAll('#winBody tr')).map(tr => {
        const dow = Number(tr.dataset.dow);
        const enabled = tr.querySelector('[data-k="enabled"]').checked ? 1 : 0;
        const start = tr.querySelector('[data-k="start"]').value || '00:00';
        const end   = tr.querySelector('[data-k="end"]').value || '00:00';
        return { dow, start, end, enabled };
      });

      await fetch('/api/windows', { method:'POST', headers: headers(), body: JSON.stringify({ windows: rows }) });
      $('#saveWinMsg').textContent = 'Guardado.';
      setTimeout(()=> $('#saveWinMsg').textContent='', 1500);
    };

    $('#saveContext').onclick = async ()=>{
      await fetch('/api/settings', {
        method:'POST', headers: headers(),
        body: JSON.stringify({ bot_context: $('#context').value })
      });
      $('#saveCtxMsg').textContent = 'Guardado.';
      setTimeout(()=> $('#saveCtxMsg').textContent='', 1500);
    };

    // Carga inicial + polling
    loadAll();
    state.polling = setInterval(async ()=>{ try { await renderStatus(await fetchStatus()); } catch {} }, 5000);
  </script>
</body>
</html>
