<!-- views/responded.ejs -->
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Chats Respondidos y Estado del Tutorial üìä</title>
  <link rel="stylesheet" href="/static/styles.css" />
  <style>
    #search {
      width: 100%;
      padding: 8px 12px;
      margin-bottom: 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      font-size: 1rem;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Chats Respondidos y Estado del Tutorial üìä</h1>
    <p><a href="/">‚Üê Volver al men√∫</a></p>

    <input id="search" placeholder="Buscar por n√∫mero‚Ä¶" />

    <table>
      <thead>
        <tr>
          <th>#</th>                              <!-- Nueva columna -->
          <th>Nombre</th>
          <th>Tel√©fono</th>
          <th>√öltima respuesta</th>
          <th>Respondido por</th>
          <th>Video enviado</th>
          <th>Confirm√≥ haberlo visto</th>
        </tr>
      </thead>
      <tbody id="chats-body">
        <!-- Filas inyectadas por JS -->
      </tbody>
    </table>
  </div>

  <script>
    function formatDate(dtString) {
      if (!dtString) return '‚Äì';
      const dt = new Date(dtString);
      return dt.toLocaleString('es-CO', {
        day: 'numeric', month: 'numeric', year: 'numeric',
        hour: 'numeric', minute: '2-digit', second: '2-digit'
      });
    }

    function filterRows() {
      const q = document.getElementById('search').value.trim().toLowerCase();
      document.querySelectorAll('#chats-body tr').forEach(tr => {
        const phone = tr.querySelector('.phone-cell').textContent.toLowerCase();
        tr.style.display = phone.includes(q) ? '' : 'none';
      });
    }

    async function loadChats() {
      try {
        const res   = await fetch('/responded-data');
        const chats = await res.json();
        const tbody = document.getElementById('chats-body');
        tbody.innerHTML = '';

        chats.forEach((chat, idx) => {
          const {
            chat_id,
            name,
            last_response,
            status,
            video_enviado,
            confirmado_visto
          } = chat;

          // 1) Separa el rawNum y extrae CC/local (√∫ltimos 10 d√≠gitos)
          const rawNum = chat_id.split('@')[0];
          let phone;
          if (rawNum.length > 10) {
            const cc    = rawNum.slice(0, rawNum.length - 10);
            const local = rawNum.slice(-10);
            phone = `+${cc}-${local}`;
          } else {
            phone = `+${rawNum}`;
          }

          // 2) Qui√©n responde
          const respondedBy = status === 'paused' ? 'Humano' : 'Bot';

          // 3) √çconos de tutorial
          const yes = '<span class="icon-yes">‚úÖ S√≠</span>';
          const no  = '<span class="icon-no">‚ùå No</span>';

          // 4) Construye la fila
          const row = document.createElement('tr');
          row.classList.add(status === 'paused' ? 'row-humano' : 'row-bot');
          row.innerHTML = `
            <td>${idx + 1}</td>                                  <!-- N√∫mero -->
            <td class="editable-name"
                contenteditable="true"
                data-chat-id="${chat_id}"
            >${name || '‚Äì'}</td>
            <td class="phone-cell">${phone}</td>
            <td>${formatDate(last_response)}</td>
            <td>${respondedBy}</td>
            <td>${video_enviado ? yes : no}</td>
            <td>${confirmado_visto ? yes : no}</td>
          `;
          tbody.appendChild(row);
        });

        filterRows();
      } catch (e) {
        console.error('Error cargando chats:', e);
      }
    }

    // Al salir de la celda editable, guarda el nuevo nombre
    document.getElementById('chats-body').addEventListener('blur', async e => {
      if (!e.target.classList.contains('editable-name')) return;
      const cell    = e.target;
      const newName = cell.textContent.trim();
      const chatId  = cell.dataset.chatId;
      try {
        const resp = await fetch('/api/update-name', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ chat_id: chatId, name: newName })
        });
        if (!resp.ok) throw new Error();
      } catch {
        alert('No se pudo actualizar el nombre');
      }
    }, true);

    // Inicializaci√≥n
    loadChats();
    document.getElementById('search').addEventListener('input', filterRows);
    setInterval(loadChats, 15000);
  </script>
</body>
</html>
